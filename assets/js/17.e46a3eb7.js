(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{508:function(e,t,a){e.exports=a.p+"assets/img/1.6d61aef0.png"},612:function(e,t,a){"use strict";a.r(t);var r=a(55),s=Object(r.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h2",{attrs:{id:"regular-expression"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#regular-expression"}},[e._v("#")]),e._v(" Regular Expression")]),e._v(" "),r("p",[e._v("This is an ongoing article. I will be able to finish it in a couple of days.")]),e._v(" "),r("p",[e._v("I always want to post something else in this website instead of just leetcode solutions. And the other day, my friend asked me something about regular expression. And I decided to write a artical about regular expression. And this is it.")]),e._v(" "),r("h4",{attrs:{id:"_1-introduction"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-introduction"}},[e._v("#")]),e._v(" 1. Introduction")]),e._v(" "),r("p",[e._v("In fact we use regular expression all the time, like when we use Ctrl+F to search some content in the webpage, the string we typed is actually a regular expression.")]),e._v(" "),r("p",[e._v("For example, we want to search the word "),r("strong",[e._v('"exp"')]),e._v(', and we type exp, the exp is an regular expression, however, the would give us some result that we don\'t want, like the "exp" in these words: "experience", "expression", "expect". Now, what if we only want the word "exp"? This is when the real regular expression come in.')]),e._v(" "),r("p",[e._v("In general, we think regular expression is just an expression that used to determine whether a string fits our requirement or not.")]),e._v(" "),r("p",[e._v("I am going to list the regular expression for word "),r("strong",[e._v('"exp"')]),e._v(" here:  "),r("code",[e._v("\\bexp\\b")]),e._v(". And we will talk about it later.")]),e._v(" "),r("h4",{attrs:{id:"_2-metacharacters"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-metacharacters"}},[e._v("#")]),e._v(" 2. Metacharacters")]),e._v(" "),r("p",[e._v("Metacharacters are some characters that have a special meaning to a computer program. For example, the "),r("code",[e._v("\\b")]),e._v(" in the previous example is a metacharacters. It means before an word or the end of the word. The first "),r("code",[e._v("\\b")]),e._v(" means before the start of the word, and exp means after the start, there are 3 chars, 'e', 'x', and 'p', and the second "),r("code",[e._v("\\b")]),e._v(' means after the end of the word. In a more general speaking: there is an exp between the start and the end of the word, which means the word is exactly "exp".')]),e._v(" "),r("p",[e._v("Now, lets talk about some other metacharacters.")]),e._v(" "),r("table",[r("thead",[r("tr",[r("th",[e._v("Metacharacter")]),e._v(" "),r("th",[e._v("Meaning")])])]),e._v(" "),r("tbody",[r("tr",[r("td",[e._v("^")]),e._v(" "),r("td",[e._v("The begining of the word")])]),e._v(" "),r("tr",[r("td",[e._v("$")]),e._v(" "),r("td",[e._v("The end of the word")])]),e._v(" "),r("tr",[r("td",[e._v(".")]),e._v(" "),r("td",[e._v("The period matches any alphanumeric character or symbol.")])]),e._v(" "),r("tr",[r("td",[e._v("\\d")]),e._v(" "),r("td",[e._v("Whole Number 0 - 9")])]),e._v(" "),r("tr",[r("td",[e._v("\\w")]),e._v(" "),r("td",[e._v("Alphanumeric Character")])]),e._v(" "),r("tr",[r("td",[e._v("\\s")]),e._v(" "),r("td",[e._v("anylength of space")])])])]),e._v(" "),r("p",[e._v("You might wonder what is the difference between "),r("code",[e._v("^$")]),e._v(" and "),r("code",[e._v("\\b")]),e._v(".  Well, you can understant it this way, "),r("code",[e._v("^$")]),e._v(" is used to validate the whole in put string, it doen's care how many spaces, how many words are in the string, it treats them all as a string, and this string must start and end with the designated char. But "),r("code",[e._v("\\b")]),e._v(" is more like find each word in the string, and return all that matches. The below image will help you understand that.")]),e._v(" "),r("p",[r("img",{attrs:{src:a(508),alt:""}})]),e._v(" "),r("p",[e._v("Now let's look at some metacharacters that related to numbe of apppearance of some char.")]),e._v(" "),r("table",[r("thead",[r("tr",[r("th",[e._v("Metacharacter related to number of appearance")]),e._v(" "),r("th",[e._v("Meaning")])])]),e._v(" "),r("tbody",[r("tr",[r("td",[e._v("+")]),e._v(" "),r("td",[e._v("Repeat 1 or more than once")])]),e._v(" "),r("tr",[r("td",[e._v("*")]),e._v(" "),r("td",[e._v("Repeat 0 or more time")])]),e._v(" "),r("tr",[r("td",[e._v("{a}")]),e._v(" "),r("td",[e._v("Repeat exact a times")])]),e._v(" "),r("tr",[r("td",[e._v("{a, }")]),e._v(" "),r("td",[e._v("Repeat at least a times")])]),e._v(" "),r("tr",[r("td",[e._v("{a, b}")]),e._v(" "),r("td",[e._v("Repeat at least a times, and at most b times")])])])]),e._v(" "),r("p",[e._v("Here are some examples:")]),e._v(" "),r("table",[r("thead",[r("tr",[r("th",[e._v("Regular Expression")]),e._v(" "),r("th",[e._v("Meaning")]),e._v(" "),r("th",[e._v("Example")])])]),e._v(" "),r("tbody",[r("tr",[r("td",[e._v("a\\d+")]),e._v(" "),r("td",[e._v("There are more than one number following char 'a'")]),e._v(" "),r("td",[e._v("a12345")])]),e._v(" "),r("tr",[r("td",[e._v("GPA\\w{3}")]),e._v(" "),r("td",[e._v("The string start with 'GPA' and followed by 3 Alphanumeric Character")]),e._v(" "),r("td",[e._v("GPA400")])]),e._v(" "),r("tr",[r("td",[e._v("GPA\\d{1,3}")]),e._v(" "),r("td",[e._v("The string start with 'GPA' and followed by 1/2/3 numbers")]),e._v(" "),r("td",[e._v("GPA2")])])])]),e._v(" "),r("h4",{attrs:{id:"_3-enumerate"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-enumerate"}},[e._v("#")]),e._v(" 3. Enumerate")]),e._v(" "),r("p",[e._v("Sometimes, we might encounter the situation that we only want the string contains some specific char, in this situation we will need to enumerate the value of our desired chars.")]),e._v(" "),r("p",[e._v("We use "),r("code",[e._v("[]")]),e._v("to denote to char we want. Example "),r("code",[e._v("[abc]")]),e._v(", means we only want to match char 'a', 'b', 'c'. "),r("code",[e._v("[!?]")]),e._v(" use to match Punctuation Marks.")]),e._v(" "),r("p",[e._v("There are some frequently used enumerations: "),r("code",[e._v("[a-zA-Z]")]),e._v(" matches any lower or upper letter. "),r("code",[e._v("[a-zA-Z0-9_]")]),e._v(" is the same as "),r("code",[e._v("\\w")]),e._v(".")]),e._v(" "),r("h4",{attrs:{id:"_4-branch"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-branch"}},[e._v("#")]),e._v(" 4. Branch")]),e._v(" "),r("p",[e._v("We use "),r("code",[e._v("|")]),e._v(" to denote branch. This symble here is equal to or condition. "),r("code",[e._v("exp1|exp2")]),e._v(" means if exp1 or exp2 matches the input, we should return True.")]),e._v(" "),r("p",[e._v("For example, if we want to match a US phone number. The phone number usually has two format: a ten digit number of (abc)-def-ghij. In this case, our regular expression can be written as "),r("code",[e._v("\\d{10}|\\(\\d{3}\\)-\\d{3}-d{4}")])]),e._v(" "),r("h4",{attrs:{id:"_5-grouping"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5-grouping"}},[e._v("#")]),e._v(" 5. Grouping")]),e._v(" "),r("p",[e._v("From above we know we can use "),r("code",[e._v("{}")]),e._v(" to set the number a char appears that we want, but want if we want the string 'abc' to appear 3 times? That we can use "),r("code",[e._v("()")]),e._v(" to to that: "),r("code",[e._v("(abc){3}")])]),e._v(" "),r("h4",{attrs:{id:"_6-exclusion"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_6-exclusion"}},[e._v("#")]),e._v(" 6. Exclusion")]),e._v(" "),r("p",[e._v("Sometime we want to match a string without some specific char, this is the time when exlusion kicks in.")]),e._v(" "),r("p",[e._v("Still remember the metacharacters we talked about above? Did you notice that they are all in the lower case. Now, if we turn them in "),r("strong",[e._v("UPPER CASE")]),e._v(", their meaning would be except xxx.")]),e._v(" "),r("table",[r("thead",[r("tr",[r("th",[e._v("Metacharacter")]),e._v(" "),r("th",[e._v("Meaning")])])]),e._v(" "),r("tbody",[r("tr",[r("td",[e._v("\\D")]),e._v(" "),r("td",[e._v("exclude any number")])]),e._v(" "),r("tr",[r("td",[e._v("\\W")]),e._v(" "),r("td",[e._v("exclude Alphanumeric Character")])]),e._v(" "),r("tr",[r("td",[e._v("\\S")]),e._v(" "),r("td",[e._v("except space")])]),e._v(" "),r("tr",[r("td",[e._v("\\B")]),e._v(" "),r("td",[e._v("Except the start of the word")])]),e._v(" "),r("tr",[r("td",[e._v("[^abc]")]),e._v(" "),r("td",[e._v("Exclude char 'a', 'b', 'c'")])])])]),e._v(" "),r("h2",{attrs:{id:"some-exercise"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#some-exercise"}},[e._v("#")]),e._v(" Some Exercise")]),e._v(" "),r("h4",{attrs:{id:"_1-match-ip-address"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-match-ip-address"}},[e._v("#")]),e._v(" 1. Match IP address")]),e._v(" "),r("p",[r("code",[e._v("((2[0-4]\\d|25[0-5]|[01]?\\d\\d?)\\.){3}(2[0-4]\\d|25[0-5]|[01]?\\d\\d?)")])]),e._v(" "),r("h4",{attrs:{id:"_2-a-string-only-contains-a-and-b-and-the-string-needs-to-start-and-end-with-the-same-char"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-a-string-only-contains-a-and-b-and-the-string-needs-to-start-and-end-with-the-same-char"}},[e._v("#")]),e._v(" 2. A string only contains 'a' and 'b', and the string needs to start and end with the same char.")]),e._v(" "),r("p",[r("code",[e._v("\\ba[ab]*a\\b|\\bb[ab]*b\\b|\\ba{1}\\b|\\bb{1}\\b")])])])}),[],!1,null,null,null);t.default=s.exports}}]);